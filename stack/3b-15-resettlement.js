
// Ограничение времени	1 секунда
// Ограничение памяти	256Mb
// Ввод	стандартный ввод или input.txt
// Вывод	стандартный вывод или output.txt
// Лайнландия представляет из себя одномерный мир, являющийся прямой, на котором распологаются N городов, последовательно пронумерованных от 0 до N - 1 . Направление в сторону от первого города к нулевому названо западным, а в обратную — восточным.
// Когда в Лайнландии неожиданно начался кризис, все были жители мира стали испытывать глубокое смятение. По всей Лайнландии стали ходить слухи, что на востоке живётся лучше, чем на западе.
// Так и началось Великое Лайнландское переселение. Обитатели мира целыми городами отправились на восток, покинув родные улицы, и двигались до тех пор, пока не приходили в город, в котором средняя цена проживания была меньше, чем в родном.

// Формат ввода
// В первой строке дано одно число N (
// 2
// ≤
// N
// ≤
// 1
// 0
// 5
// ) — количество городов в Лайнландии. Во второй строке дано N чисел 
// a
// i
//  (
// 0
// ≤
// a
// i
// ≤
// 1
// 0
// 9
// ) — средняя цена проживания в городах с нулевого по (N - 1)-ый соответственно.
// Формат вывода
// Для каждого города в порядке с нулевого по (N - 1)-ый выведите номер города, в который переселятся его изначальные жители. Если жители города не остановятся в каком-либо другом городе, отправившись в Восточное Бесконечное Ничто, выведите -1 .
// Пример
// Ввод	Вывод
// 10
// 1 2 3 2 1 4 2 5 3 1
// -1 4 3 4 -1 6 9 8 9 -1

function solve(input) {
    const data = input.toString().trim().split('\n');
    const n = +data[0];
    const line = data[1].split(' ').map(Number);
    const stack = [[line[0], 0]];
    const res = [];

    for (let i = 1; i < n; i++) {
        if (line[i] >= stack[stack.length - 1][0]) {
            stack.push([line[i], i])
        } else {
            for (let j = stack.length - 1; j >= 0; j--) {
                if (line[i] < stack[j][0]) {
                    res[stack[j][1]] = i;
                    stack.pop();
                }
            }
            stack.push([line[i], i]);
        }
    }

    for (let i = 0; i < n; i++) {
        if (res[i] === undefined) res[i] = -1;
    }

    return res.join(' ');
}

const fs = require('fs');
const fileContent = fs.readFileSync('input.txt', 'utf8');
const result = solve(fileContent);
fs.writeFileSync('output.txt', result + '');