
// Ограничение времени	1 секунда
// Ограничение памяти	64Mb
// Ввод	стандартный ввод или input.txt
// Вывод	стандартный вывод или output.txt
// Вовочка ломает систему безопасности Пентагона. Для этого ему понадобилось узнать, какие символы в секретных зашифрованных посланиях употребляются чаще других. Для удобства изучения Вовочка хочет получить графическое представление встречаемости символов. Поэтому он хочет построить гистограмму количества символов в сообщении. Гистограмма — это график, в котором каждому символу, встречающемуся в сообщении хотя бы один раз, соответствует столбик, высота которого пропорциональна количеству этих символов в сообщении.

// Формат ввода
// Входной файл содержит зашифрованный текст сообщения. Он содержит строчные и прописные латинские буквы, цифры, знаки препинания («.», «!», «?», «:», «-», «,», «;», «(», «)»), пробелы и переводы строк. Размер входного файла не превышает 10000 байт. Текст содержит хотя бы один непробельный символ. Все строки входного файла не длиннее 200 символов.Для каждого символа c кроме пробелов и переводов строк выведите столбик из символов «#», количество которых должно быть равно количеству символов c в данном тексте. Под каждым столбиком напишите символ, соответствующий ему. Отформатируйте гистограмму так, чтобы нижние концы столбиков были на одной строке, первая строка и первый столбец были непустыми. Не отделяйте столбики друг от друга. Отсортируйте столбики в порядке увеличения кодов символов.

// Формат вывода
// Для каждого символа c кроме пробелов и переводов строк выведите столбик из символов «#», количество которых должно быть равно количеству символов c в данном тексте. Под каждым столбиком напишите символ, соответствующий ему. Отформатируйте гистограмму так, чтобы нижние концы столбиков были на одной строке, первая строка и первый столбец были непустыми. Не отделяйте столбики друг от друга. Отсортируйте столбики в порядке увеличения кодов символов.

// Пример 1
// Ввод	Вывод
// Hello, world!
//      #   
//      ##  
// #########
// !,Hdelorw
// Пример 2
// Ввод	Вывод
// Twas brillig, and the slithy toves
// Did gyre and gimble in the wabe;
// All mimsy were the borogoves,
// And the mome raths outgrabe.
//          #              
//          #              
//          #              
//          #              
//          #              
//          #         #    
//          #  #      #    
//       #  # ###  ####    
//       ## ###### ####    
//       ##############    
//       ##############  ##
// #  #  ############## ###
// ########################
// ,.;ADTabdeghilmnorstuvwy

function solve(input) {
    const data = input.toString().trim()
        .split('\n')
        .map(el => el.split(''))
        .flat()
        .filter(el => el !== ' ')
        .sort();

    let map = {}

    for (let i = 0; i < data.length; i++) {
        if (map[data[i]] === undefined) {
            map[data[i]] = 1;
        } else {
            map[data[i]]++;
        }
    }

    let max = 1;
    const res = [];
    const set = Object.keys(map).sort();
    const arr = [];

    for (let key in map) {
        max = Math.max(max, map[key]);
    }

    for (let key in map) {
        const count = map[key];
        const diff = max - map[key];
        map[key] = `${' '.repeat(diff)}${'#'.repeat(count)}`.split('');
    }

    for (let i = 0; i < max; i++) {
        for (let j = 0; j < set.length; j++) {
            res[i] = res[i] === undefined ? map[set[j]][i] : res[i] + map[set[j]][i];
        }
    }

    res[max] = set.join('');

    return res.join('\n'); 
}

const fs = require('fs');
const fileContent = fs.readFileSync('input.txt', 'utf8');
const result = solve(fileContent);
fs.writeFileSync('output.txt', result + '');