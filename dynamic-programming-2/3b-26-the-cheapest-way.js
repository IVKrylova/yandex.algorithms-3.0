// 26. Самый дешевый путь

// Ограничение времени 1 секунда
// Ограничение памяти 256Mb
// Ввод	стандартный ввод или input.txt
// Вывод стандартный вывод или output.txt

// В каждой клетке прямоугольной таблицы N × M записано некоторое число. 
// Изначально игрок находится в левой верхней клетке. За один ход ему разрешается 
// перемещаться в соседнюю клетку либо вправо, либо вниз (влево и вверх перемещаться запрещено). 
// При проходе через клетку с игрока берут столько килограммов еды, какое число записано в этой 
// клетке (еду берут также за первую и последнюю клетки его пути).
// Требуется найти минимальный вес еды в килограммах, отдав которую игрок может попасть в правый нижний угол.

// Формат ввода
// Вводятся два числа N и M — размеры таблицы (1 ≤ N ≤ 20, 1 ≤ M ≤ 20). Затем идет N строк по M чисел 
// в каждой — размеры штрафов в килограммах за прохождение через соответствующие клетки (числа от 0 до 100).

// Формат вывода
// Выведите минимальный вес еды в килограммах, отдав которую можно попасть в правый нижний угол.

function solve(input) {
    const data = input.toString().trim().split('\n');
    const [n, m] = data[0].split(' ').map(Number);
    const table = data.slice(1).map(el => el.split(' ').map(Number));
    const dp = Array.from(Array(n + 1), () => new Array(m + 1));

    for (let i = 0; i <= m; i++) {
        dp[0][i] = 1000;
    }

    for (let i = 1; i <= n; i++) {
        dp[i][0] = 1000;
    }

    for (let i = 1; i <= n; i++) {
        for (let j = 1; j <= m; j++) {
            if (i === 1 && j === 1) {
                dp[i][j] = table[0][0];
            } else {
                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + table[i - 1][j - 1];
            }
        }
    }

    return dp[n][m];
}

const fs = require('fs');
const fileContent = fs.readFileSync('input.txt', 'utf8');
const result = solve(fileContent);
fs.writeFileSync('output.txt', result + '');
